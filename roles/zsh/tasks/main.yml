---
###############################################################################
# Zsh configuration

- name: zsh | Sets zsh as default shell for root | user
  become: yes
  user:
    name: "{{ dotfiles_user }}"
    shell: /bin/zsh

- name: zsh | Sets zsh as default shell for {{ dotfiles_user }} | user
  become: yes
  user:
    name: "{{ dotfiles_user }}"
    shell: /bin/zsh

- name: zsh | Checks for oh-my-zsh installation | stat
  stat:
    path: "{{ dotfiles_user_home }}/.oh-my-zsh"
  register: oh_my_zsh_stat

- name: zsh | Installs oh-my-zsh | raw
  raw: 'sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
  when: not oh_my_zsh_stat.stat.exists

- name: zsh | Checks for Starship installation | stat
  stat:
    path: "{{ dotfiles_user_home }}/.config/starship.toml"
  register: starship_stat

- name: zsh | Installs Starship | raw
  become: yes
  raw: 'sh -c "$(curl -fsSL https://starship.rs/install.sh)" -f -y'
  when: not starship_stat.stat.exists

- name: zsh | Copies starship.toml | template
  template:
    src: "starship.toml.j2"
    dest: "{{ dotfiles_user_home }}/.config/starship.toml"

- name: zsh | Copies .zshrc | template
  template:
    src: "zshrc.j2"
    dest: "{{ dotfiles_user_home }}/.zshrc"

- name: zsh | Make sure Ranger config dir exists | file
  file:
    path: "{{ dotfiles_user_home }}/.config/ranger/"
    state: directory

- name: zsh | Copies rc.conf for Ranger | template
  template:
    src: "rc.conf.j2"
    dest: "{{ dotfiles_user_home }}/.config/ranger/rc.conf"

- name: zsh | Copies quicklook helper script for Ranger | template
  when: ansible_distribution == 'MacOSX'
  template:
    src: "ql.j2"
    dest: "{{ dotfiles_user_home }}/.bin/ql"

- name: zsh | Sets user bin directory path variable | set_fact
  set_fact:
    user_bin_path: '{{ dotfiles_user_home }}/.bin/'

- name: zsh | Make sure .zshenv config dir exists | file
  file:
    path: "{{ dotfiles_user_home }}/.zshenv"
    state: touch


# - name: "zsh | Add {{ user_bin_path }} if PATH does not exist | lineinfile"
  # lineinfile:
    # path: '{{ dotfiles_user_home }}/.zshenv'
    # line: 'export PATH=$PATH:"{{ user_bin_path }}"'
    # insertafter: EOF
  # when: lookup('file', '/Users/jickel/.zshenv') is not search('^\s*PATH\s*=')
#
# - name: zsh | Add {{ user_bin_path }} to PATH | lineinfile
  # lineinfile:
    # path:  '{{ dotfiles_user_home }}/.zshenv'
    # regexp: 'PATH=(["])((?!.*?{{ user_bin_path }}).*?)(["])$'
    # line: 'PATH=\1\2:{{ user_bin_path }}\3'
    # backrefs: yes
  # when: lookup('file', '/Users/jickel/.zshenv') is search('^\s*PATH\s*=')

- name: zsh | Add {{ user_bin_path }} to PATH | lineinfile
  lineinfile: >
    dest='{{ dotfiles_user_home }}/.zshenv'
    state=present
    backrefs=yes
    regexp='PATH=(["]*)((?!.*?{{user_bin_path}}).*?)(["]*)$'
    line="PATH=\1\2:{{user_bin_path}}\3"

- name: zsh | Links .rgignore for rg | file
  file:
    src: "{{ dotfiles_home }}/roles/zsh/files/ignore.link"
    dest: "{{ dotfiles_user_home }}/.rgignore"
    state: link
    force: yes

- name: zsh | Links .fdignore for fd | file
  file:
    src: "{{ dotfiles_home }}/roles/zsh/files/ignore.link"
    dest: "{{ dotfiles_user_home }}/.fdignore"
    state: link
    force: yes
