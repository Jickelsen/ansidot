###############################################################################
# BEGIN: Base

export ZSH={{dotfiles_user_home}}/.oh-my-zsh

ZSH_THEME="candy"

plugins=(
  git
)
export EDITOR=vim

# auto start tmux
if [ "$TMUX" = "" ]; then
  # check for old session
  if [ "$(tmux ls | grep -v attached | wc -l)" -gt "0" ]; then
    # attach to old session
    tmux a -t "$(tmux ls | grep -v attached | cut -d ":" -f1 | head -n 1)"
  else
    # start new session - dont use exec so it's possible to run without tmux
    tmux
  fi
fi

# make fzf use Silver Searcher (ag)
# if type ag &> /dev/null; then
#   export FZF_DEFAULT_COMMAND='ag -p ~/.gitignore -g ""'
# fi


if [[ $(uname) == "Darwin" ]]; then
  # dirname on OS X behaves funky, get gdirname via
  # brew install coreutils
  export dirname_command="gdirname"
  else
  export dirname_command="dirname"
fi

# make fzf use Ripgrep (rg)
if type rg &> /dev/null; then
  export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
  export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
  export FZF_ALT_C_COMMAND="rg --files --null 2> /dev/null | xargs -0 $dirname_command | sort -u"
fi

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# # command for listing path candidates.
# # - The first argument to the function ($1) is the base path to start traversal
# # - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  rg --hidden --files . "$1"
}

# Use fd to generate the list for directory completion
# see https://github.com/junegunn/fzf/issues/1067#issuecomment-334290961
_fzf_compgen_dir() {
  rg --hidden --files . 2>/dev/null | awk 'function dirname(fn) { if (fn == "") return ".";  if (fn !~ "[^/]") return "/"; sub("/*$", "", fn); if (fn !~ "/") return "."; sub("/[^/]*$", "", fn); if (fn == "") fn = "/"; return fn } {$0 = dirname($0)} !a[$0]++'
}

source $ZSH/oh-my-zsh.sh

# configure fzf and zsh commands
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  # using ripgrep combined with preview
  # # find-in-file - usage: fif <searchTerm>
  fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
  }
  rga-fzf() {
    RG_PREFIX="rga --files-with-matches"
    local file
    file="$(
      FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
      fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
      --phony -q "$1" \
      --bind "change:reload:$RG_PREFIX {q}" \
      --preview-window="70%:wrap"
    )" &&
    echo "opening $file" &&
    xdg-open "$file"
  }
  source /usr/share/doc/fzf/examples/completion.zsh
  source /usr/share/doc/fzf/examples/key-bindings.zsh
elif [[ "$OSTYPE" == "darwin"* ]]; then
  # alternative using ripgrep-all (rga) combined with fzf-tmux preview
  # # This requires ripgrep-all (rga) installed: https://github.com/phiresky/ripgrep-all
  # # This implementation below makes use of "open" on macOS, which can be replaced by other commands if needed.
  # # allows to search in PDFs, E-Books, Office documents, zip, tar.gz, etc. (see https://github.com/phiresky/ripgrep-all)
  # # find-in-file - usage: fif <searchTerm> or fif "string with spaces" or fif "regex"
  fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    local file
    file="$(rga --max-count=1 --ignore-case --files-with-matches --no-messages "$*" | fzf-tmux +m --preview="rga --ignore-case --pretty --context 10 '"$*"' {}")" && echo "opening $file" && open "$file" || return 1;
  }           
  # ql:           Opens any file in MacOS Quicklook Preview
  ql() { 
    qlmanage -p "$*" >& /dev/null; 
  }
  if [[ "$CPUTYPE" == "arm64" ]]; then # Apple Silicon
    source /opt/homebrew/opt/fzf/shell/completion.zsh
    source /opt/homebrew/opt/fzf/shell/key-bindings.zsh
  else 
    source /usr/local/opt/fzf/shell/completion.zsh
    source /usr/local/opt/fzf/shell/key-bindings.zsh
  fi
fi
  
eval "$(starship init zsh)"

###############################################################################
